diff --git a/clang/lib/Parse/ParseDecl.cpp b/clang/lib/Parse/ParseDecl.cpp
index cff8c76183f6..ef6a1d2c1844 100644
--- a/clang/lib/Parse/ParseDecl.cpp
+++ b/clang/lib/Parse/ParseDecl.cpp
@@ -775,7 +775,9 @@ void Parser::ParseMicrosoftDeclSpecs(ParsedAttributes &Attrs,
 void Parser::ParseMicrosoftTypeAttributes(ParsedAttributes &attrs) {
   // Treat these like attributes
   while (true) {
-    switch (Tok.getKind()) {
+    // [MSVC Compatibility]
+    auto Kind = Tok.getKind();
+    switch (Kind) {
     case tok::kw___fastcall:
     case tok::kw___stdcall:
     case tok::kw___thiscall:
@@ -791,6 +793,14 @@ void Parser::ParseMicrosoftTypeAttributes(ParsedAttributes &attrs) {
       SourceLocation AttrNameLoc = ConsumeToken();
       attrs.addNew(AttrName, AttrNameLoc, nullptr, AttrNameLoc, nullptr, 0,
                    ParsedAttr::AS_Keyword);
+      // [MSVC Compatibility]
+      if (Kind == tok::kw___stdcall || Kind == tok::kw___cdecl ||
+          Kind == tok::kw___fastcall || Kind == tok::kw___thiscall ||
+          Kind == tok::kw___regcall || Kind == tok::kw___vectorcall) {
+        if (Tok.is(tok::r_paren)) {
+          ConsumeParen();
+        }
+      }
       break;
     }
     default:
@@ -3360,7 +3370,13 @@ void Parser::ParseDeclarationSpecifiers(DeclSpec &DS,
 
       DS.SetRangeEnd(Tok.getAnnotationEndLoc());
       ConsumeAnnotationToken(); // The typename
-
+      //[MSVC Compatibility]
+      if (Tok.is(tok::l_paren) &&
+          NextToken().isOneOf(tok::kw___stdcall, tok::kw___cdecl,
+                              tok::kw___fastcall, tok::kw___thiscall,
+                              tok::kw___regcall, tok::kw___vectorcall)) {
+        ConsumeParen();
+      }
       continue;
     }
 
diff --git a/clang/lib/Parse/ParseTentative.cpp b/clang/lib/Parse/ParseTentative.cpp
index 512993a5278e..5bcf1f7a6eb8 100644
--- a/clang/lib/Parse/ParseTentative.cpp
+++ b/clang/lib/Parse/ParseTentative.cpp
@@ -1642,8 +1642,19 @@ Parser::isCXXDeclarationSpecifier(Parser::TPResult BracedCastResult,
   case tok::annot_decltype:
 #define GENERIC_IMAGE_TYPE(ImgType, Id) case tok::kw_##ImgType##_t:
 #include "clang/Basic/OpenCLImageTypes.def"
-    if (NextToken().is(tok::l_paren))
+    if (NextToken().is(tok::l_paren)) {
+      //[MSVC Compatibility]
+      if (Tok.is(tok::annot_typename)) {
+        const Token &NextNextToken = PP.LookAhead(1);
+        if (NextNextToken.isOneOf(tok::kw___stdcall, tok::kw___cdecl,
+                                  tok::kw___fastcall, tok::kw___thiscall,
+                                  tok::kw___regcall, tok::kw___vectorcall)) {
+          return TPResult::True;
+        }
+      }
       return TPResult::Ambiguous;
+    }
+      
 
     // This is a function-style cast in all cases we disambiguate other than
     // one:
